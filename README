dinsd: D Is Not Static D
========================

This project (still in its early stages) is an attempt to turn Python into
something D-like, where D is a theoretical construct envisioned by Hugh Darwen
and C. J. Date (see http://www.thethirdmanifesto.com/).  The goal is to have a
computationally complete language that implements a full relational algebra as
a first class citizen.

Python can never be a D, because D requires static typing and Python is
dynamically typed.  But Python plus the dinsd module does make the relational
algebra a first class citizen, turning Python into Relational Python.

At this early stage of the project *only* the relational algebra is
implemented.  So right now it is mostly useful as a tool for playing with
relational algebra at the Python shell prompt.  The goal, though, is to provide
a persistence layer (as well as other currently-missing DBMS features) such
that it will be practical to use it in at least the contexts where an SQL
engine like SQLite is currently used.  (In point of fact, SQLite will probably
*be* the persistence layer.)

Currently there is no project infrastructure other than for running the tests
('make test' in the root directory).  The entire library consists of one
file, dinsd.py, and you can just copy that to wherever you want in order
to play with it.

The documentation consists of the literate test document:

    src/test/tutorial_d_book.txt

which is evolving along with the code and so may not be completely internally
consistent at any given checkin.  The tests should always be passing, but the
text may not be 100% consistent with itself if I'm in the middle of a major
refactoring.  Most of the time it should be, though, and the document should
therefore provide a thorough introduction to the project and its current
capabilities.

dinsd currently requires Python 3.4 (as of this writing that means Python built
from the head of the Python "default" branch in Mercurial).  Mostly it will run
fine using Python 3.3, and I will probably officially support 3.3 at some
point.

Note that there is another project with a similar goal:

    http://www.quicksort.co.uk/DeeDoc.html

Dee is more feature complete, is a Python 2.7 project, and does not appear to
be in current development.
